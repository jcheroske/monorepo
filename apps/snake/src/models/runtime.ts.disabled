import { freeze, produce } from 'immer'
import { writable } from 'svelte/store'

import type { RuntimeStatus } from '~/types'

const INITIAL_STATE = freeze({
  foodCount: 0,
  status: 'RESET' as RuntimeStatus,
})

const runtime = writable(INITIAL_STATE)

function reset(): void {
  runtime.set(INITIAL_STATE)
}

function start(): void {
  runtime.update(
    produce((draft) => {
      switch (draft.status) {
        case 'RESET':
        case 'PAUSED':
          draft.status = 'RUNNING'
      }
    }),
  )
}

function pause(): void {
  runtime.update((state) => {
    if (state.status === 'RUNNING') {
      return { ...state, status: 'PAUSED' }
    }

    return state
  })
}

function finish(): void {
  runtime.update((state) => {
    if (state.status === 'RUNNING') {
      return { ...state, status: 'FINISHED' }
    }

    return state
  })
}

function consumeFood(): void {
  runtime.update((state) => {
    if (state.status === 'RUNNING') {
      return { ...state, foodCount: state.foodCount + 1 }
    }

    return state
  })
}

export { consumeFood, finish, pause, reset, runtime, start }
